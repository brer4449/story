[{"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\index.js":"1","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\App.js":"2","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\firebase.js":"3","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\HomePage.js":"4","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\LibraryPage.js":"5","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\GiftPage.js":"6","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Navbar\\index.js":"7","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Footer\\index.js":"8","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Login\\index.js":"9","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\ClientForm\\index.js":"10","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Proposal\\index.js":"11","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\GoogleLogout\\index.js":"12","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\GoogleLogin\\index.js":"13","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\utils\\refreshtoken.js":"14","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\EntryPage.js":"15","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Signup\\index.js":"16"},{"size":166,"mtime":1609865848835,"results":"17","hashOfConfig":"18"},{"size":949,"mtime":1609884451930,"results":"19","hashOfConfig":"18"},{"size":731,"mtime":1609884730636,"results":"20","hashOfConfig":"18"},{"size":2995,"mtime":1609865848895,"results":"21","hashOfConfig":"18"},{"size":1351,"mtime":1609865848914,"results":"22","hashOfConfig":"18"},{"size":794,"mtime":1609865848879,"results":"23","hashOfConfig":"18"},{"size":2345,"mtime":1609865848622,"results":"24","hashOfConfig":"18"},{"size":228,"mtime":1609865848459,"results":"25","hashOfConfig":"18"},{"size":3833,"mtime":1609865848575,"results":"26","hashOfConfig":"18"},{"size":5610,"mtime":1609865848408,"results":"27","hashOfConfig":"18"},{"size":4615,"mtime":1609865848664,"results":"28","hashOfConfig":"18"},{"size":621,"mtime":1609120182505,"results":"29","hashOfConfig":"18"},{"size":1060,"mtime":1609121965528,"results":"30","hashOfConfig":"18"},{"size":905,"mtime":1609122244464,"results":"31","hashOfConfig":"18"},{"size":893,"mtime":1609884763341,"results":"32","hashOfConfig":"18"},{"size":3488,"mtime":1609865848705,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"tl9nfn",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\index.js",[],["72","73"],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\App.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\firebase.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\HomePage.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\LibraryPage.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\GiftPage.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Navbar\\index.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Footer\\index.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Login\\index.js",["74","75"],"import React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\n// import GoogleLoginComp from \"../GoogleLogin/index\";\n// import GoogleLogoutComp from \"../GoogleLogout/index\";\nimport db from \"../../firebase\";\nimport \"./style.css\";\n\nfunction Login() {\n  const [inputs, setInputs] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  // Server state handling\n  const [serverState, setServerState] = useState({\n    submitting: false,\n    status: null,\n  });\n  // State to track field errors\n  const [fieldErrors, setFieldErrors] = useState({});\n  // Validation rules for each input field\n  const validationRules = {\n    email: (val) => val && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val),\n    password: (val) => val.length > 8 && /^[\\w.]+$/i.test(val),\n  };\n\n  // Validate function that updates state and returns true if all rules pass\n  const validate = () => {\n    let errors = {};\n    let hasErrors = false;\n    for (let key of Object.keys(inputs)) {\n      errors[key] = !validationRules[key](inputs[key]);\n    }\n    setFieldErrors((prev) => ({ ...prev, ...errors }));\n    return !hasErrors;\n  };\n\n  // Render method to display field errors\n  const renderFieldError = (field) => {\n    if (fieldErrors[field]) {\n      return <p className=\"errorMsg\">Please enter a valid {field}</p>;\n    }\n  };\n\n  const handleOnChange = (e) => {\n    e.persist();\n    setInputs((prev) => ({\n      ...prev,\n      [e.target.id]: e.target.value,\n    }));\n  };\n\n  const handleServerResponse = (ok, msg) => {\n    setServerState({\n      submitting: false,\n      status: { ok, msg },\n    });\n    if (ok) {\n      setFieldErrors({});\n      setInputs({\n        email: \"\",\n        password: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    // Only perform interactive validation after submit\n    if (Object.keys(fieldErrors.length > 0)) {\n      validate();\n    }\n  }, [inputs]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"this worked! in login component\");\n    if (!validate()) {\n      return;\n    }\n    db.collection(\"userLogin\")\n      .add({\n        email: inputs.email,\n        passsword: inputs.password,\n      })\n      .then(() => {\n        handleServerResponse(true, \"Login Successful!\");\n        alert(\"You've successfully logged in!\");\n      })\n      .catch((err) => {\n        handleServerResponse(false, \"Login Failed!\");\n        alert(err.message);\n      });\n    setServerState({ submitting: true });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div className=\"spacing\">\n        <Form.Label htmlFor=\"email\">Email</Form.Label>\n        <Form.Control\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"Enter Email LOGIN\"\n          value={inputs.email}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"email\")}\n      </div>\n      <div className=\"spacing\">\n        <Form.Label htmlFor=\"password\">Password</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Enter Password LOGIN\"\n          value={inputs.password}\n          onChange={handleOnChange}\n        ></Form.Control>\n      </div>\n      <div>\n        <Form.Label htmlFor=\"remember\">Remember Me</Form.Label>\n        <Form.Control\n          type=\"checkbox\"\n          id=\"remember\"\n          name=\"remember\"\n        ></Form.Control>\n      </div>\n      <button className=\"btn btn-primary mb-10\" type=\"submit\">\n        Log In\n      </button>\n      {serverState.status && (\n        <p className={!serverState.status.ok ? \"errorMsg\" : \"successMsg\"}></p>\n      )}\n      <p className=\"text-right\">\n        <a href=\"#\">Forgot Password?</a>\n      </p>\n      {/* <GoogleLoginComp></GoogleLoginComp>\n      <GoogleLogoutComp></GoogleLogoutComp> */}\n    </Form>\n  );\n}\n\nexport default Login;\n","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\ClientForm\\index.js",["76"],"import React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport \"./style.css\";\nimport axios from \"axios\";\nimport db from \"../../firebase\";\n\nconst ClientForm = () => {\n  const [inputs, setInputs] = useState({\n    timeFrame: \"\",\n    recipient: \"\",\n    priceRange: \"\",\n    genre: \"\",\n    size: \"\",\n    specifics: \"\",\n  });\n  // Server state handling\n  const [serverState, setServerState] = useState({\n    submitting: false,\n    status: null,\n  });\n  //State to track field errors\n  const [fieldErrors, setFieldErrors] = useState({});\n\n  //Validation rules for each input field\n  const validationRules = {\n    timeFrame: (val) => !!val,\n    recipient: (val) => !!val,\n    priceRange: (val) => !!val,\n    genre: (val) => !!val,\n    size: (val) => !!val,\n    specifics: (val) => !!val,\n  };\n\n  // Validate function that updates state and returns true if all rules pass\n  const validate = () => {\n    let errors = {};\n    let hasErrors = false;\n    for (let key of Object.keys(inputs)) {\n      errors[key] = !validationRules[key](inputs[key]);\n      hasErrors |= errors[key];\n    }\n    setFieldErrors((prev) => ({ ...prev, ...errors }));\n    return !hasErrors;\n  };\n\n  // Render method to display field errors\n  const renderFieldError = (field) => {\n    if (fieldErrors[field]) {\n      return <p className=\"errorMsg\">Please enter a valid {field}.</p>;\n    }\n  };\n\n  const handleOnChange = (e) => {\n    e.persist();\n    setInputs((prev) => ({\n      ...prev,\n      [e.target.id]: e.target.value,\n    }));\n  };\n\n  const handleServerResponse = (ok, msg) => {\n    setServerState({\n      submitting: false,\n      status: { ok, msg },\n    });\n    if (ok) {\n      setFieldErrors({});\n      setInputs({\n        timeFrame: \"\",\n        recipient: \"\",\n        priceRange: \"\",\n        genre: \"\",\n        size: \"\",\n        specifics: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    // Only perform interactive validation after submit\n    if (Object.keys(fieldErrors).length > 0) {\n      validate();\n    }\n  }, [inputs]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!validate()) {\n      return;\n    }\n    db.collection(\"application\")\n      .add({\n        timeFrame: inputs.timeFrame,\n        recipient: inputs.recipient,\n        priceRange: inputs.priceRange,\n        genre: inputs.genre,\n        size: inputs.size,\n        specifics: inputs.specifics,\n      })\n      .then(() => {\n        alert(\"Your application has been submitted!\");\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n    setServerState({ submitting: true });\n    axios({\n      method: \"POST\",\n      url: `https://formspree.io/f/xyyjvbzz`,\n      data: inputs,\n    })\n      .then((r) => {\n        handleServerResponse(true, \"Thanks for submitting your application!\");\n      })\n      .catch((r) => {\n        handleServerResponse(false, r.response.data.error);\n      });\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"timeFrame\">Estimated Time Frame:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"timeFrame\"\n          name=\"timeFrame\"\n          placeholder=\"How long will this project take?\"\n          value={inputs.timeFrame}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"timeFrame\")}\n      </div>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"recipient\">Recipient:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"recipient\"\n          name=\"recipient\"\n          placeholder=\"Who is the gift for?\"\n          value={inputs.recipient}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"recipient\")}\n      </div>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"priceRange\">Price Range:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"priceRange\"\n          name=\"priceRange\"\n          placeholder=\"What's your price range?\"\n          value={inputs.priceRange}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"priceRange\")}\n      </div>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"genre\">Genre:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"genre\"\n          name=\"genre\"\n          placeholder=\"What type of story is it?\"\n          value={inputs.genre}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"genre\")}\n      </div>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"size\">Size of Project:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"size\"\n          name=\"size\"\n          placeholder=\"How large will the project be?\"\n          value={inputs.size}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"size\")}\n      </div>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"specifics\">Specifics About Project:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"specifics\"\n          name=\"specifics\"\n          placeholder=\"What are some things we should know about the project?\"\n          value={inputs.specifics}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"specifics\")}\n      </div>\n      <button className={\"btn btn-primary mb-10 \"} type=\"submit\">\n        Submit\n      </button>\n      {serverState.status && (\n        <p className={!serverState.status.ok ? \"errorMsg\" : \"successMsg\"}>\n          {serverState.status.msg}\n        </p>\n      )}\n    </Form>\n  );\n};\nexport default ClientForm;\n","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Proposal\\index.js",["77"],"import React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport \"./styles.css\";\nimport axios from \"axios\";\nimport db from \"../../firebase\";\n\nconst Proposal = () => {\n  // https://formspree.io/blog/react-forms-2/\n  const [inputs, setInputs] = useState({\n    email: \"\",\n    requirement: \"\",\n    rate: \"\",\n  });\n  // Server state handling\n  const [serverState, setServerState] = useState({\n    submitting: false,\n    status: null,\n  });\n  // State to track field errors\n  const [fieldErrors, setFieldErrors] = useState({});\n\n  // Validation rules for each input field\n  const validationRules = {\n    email: (val) => val && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val),\n    requirement: (val) => !!val,\n    rate: (val) => !!val,\n  };\n\n  // Validate function that updates state, and returns true if all rules pass\n  const validate = () => {\n    let errors = {};\n    let hasErrors = false;\n    for (let key of Object.keys(inputs)) {\n      errors[key] = !validationRules[key](inputs[key]);\n      hasErrors |= errors[key];\n    }\n    setFieldErrors((prev) => ({ ...prev, ...errors }));\n    return !hasErrors;\n  };\n\n  // Render method to display field errors\n  const renderFieldError = (field) => {\n    if (fieldErrors[field]) {\n      return <p className=\"errorMsg\">Please enter a valid {field}.</p>;\n    }\n  };\n\n  const handleOnChange = (e) => {\n    e.persist();\n    setInputs((prev) => ({\n      ...prev,\n      [e.target.id]: e.target.value,\n    }));\n  };\n\n  const handleServerResponse = (ok, msg) => {\n    setServerState({\n      submitting: false,\n      status: { ok, msg },\n    });\n    if (ok) {\n      setFieldErrors({});\n      setInputs({\n        email: \"\",\n        requirement: \"\",\n        rate: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    // Only perform interactive validation after submit\n    if (Object.keys(fieldErrors).length > 0) {\n      validate();\n    }\n  }, [inputs]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!validate()) {\n      return;\n    }\n    db.collection(\"proposal\")\n      .add({\n        email: inputs.email,\n        requirement: inputs.requirement,\n        rate: inputs.rate,\n      })\n      .then(() => {\n        alert(\"Your proposal has been submitted!\");\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n    setServerState({ submitting: true });\n    axios({\n      method: \"POST\",\n      url: `https://formspree.io/f/xyyjvbzz`,\n      data: inputs,\n    })\n      .then((r) => {\n        handleServerResponse(true, \"Thanks for submitting your application!\");\n      })\n      .catch((r) => {\n        handleServerResponse(false, r.response.data.error);\n      });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} noValidate>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"email\">Email Address:</Form.Label>\n        <Form.Control\n          required\n          type=\"text\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"What's your email address?\"\n          value={inputs.email}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"email\")}\n      </div>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"requirement\">\n          This is What You Need from the Client to be Successful:\n        </Form.Label>\n        <Form.Control\n          required\n          type=\"text\"\n          id=\"requirement\"\n          name=\"requirement\"\n          placeholder=\"What do you require from the client for this project to be successful?\"\n          value={inputs.requirement}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"requirement\")}\n      </div>\n      <div className=\"mb-10\">\n        <Form.Label htmlFor=\"rate\">What's Your Rate:</Form.Label>\n        <Form.Control\n          required\n          type=\"text\"\n          id=\"rate\"\n          name=\"rate\"\n          placeholder=\"How Much Do You Charge per Story?\"\n          value={inputs.rate}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"rate\")}\n      </div>\n      <button\n        className={\"btn btn-primary mb-10 \"}\n        disabled={serverState.submitting}\n        type=\"submit\"\n      >\n        Submit\n      </button>\n      {/* DO WITH JOSEPH! */}\n      {serverState.status && (\n        <p className={!serverState.status.ok ? \"errorMsg\" : \"successMsg\"}>\n          {serverState.status.msg}\n        </p>\n      )}\n      {/* setTimeout(() => {\n          <p className={!serverState.status.ok ? \"errorMsg\" : \"successMsg\"}>\n            {serverState.status.msg}\n          </p>;\n        }, 3000)} */}\n    </Form>\n  );\n};\n\nexport default Proposal;\n","C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\GoogleLogout\\index.js",[],["78","79"],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\GoogleLogin\\index.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\utils\\refreshtoken.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\pages\\EntryPage.js",[],"C:\\Users\\13107\\Desktop\\code\\Storied\\story-told\\src\\components\\Signup\\index.js",["80"],"import React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\n// import GoogleLoginComp from \"../GoogleLogin/index\";\n// import GoogleLogoutComp from \"../GoogleLogout/index\";\nimport db from \"../../firebase\";\nimport \"./style.css\";\n\nfunction SignUp() {\n  const [inputs, setInputs] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  // Server state handling\n  const [serverState, setServerState] = useState({\n    submitting: false,\n    status: null,\n  });\n  // State to track field errors\n  const [fieldErrors, setFieldErrors] = useState({});\n\n  // Validation rules for each input field\n  const validationRules = {\n    email: (val) => val && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val),\n    password: (val) => val.length > 8 && /^[\\w.]+$/i.test(val),\n  };\n\n  // Validate function tht updates state and returns true if all rules pass\n  const validate = () => {\n    let errors = {};\n    let hasErrors = false;\n    for (let key of Object.keys(inputs)) {\n      errors[key] = !validationRules[key](inputs[key]);\n    }\n    setFieldErrors((prev) => ({ ...prev, ...errors }));\n    return !hasErrors;\n  };\n\n  // Render method to display field errors\n  const renderFieldError = (field) => {\n    if (fieldErrors[field]) {\n      return <p className=\"errorMsg\">Please enter a valid {field}</p>;\n    }\n  };\n\n  const handleOnChange = (e) => {\n    e.persist();\n    setInputs((prev) => ({\n      ...prev,\n      [e.target.id]: e.target.value,\n    }));\n  };\n\n  const handleServerResponse = (ok, msg) => {\n    setServerState({\n      submitting: false,\n      status: { ok, msg },\n    });\n    if (ok) {\n      setFieldErrors({});\n      setInputs({\n        email: \"\",\n        password: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    // Only perform interactive validation after submit\n    if (Object.keys(fieldErrors).length > 0) {\n      validate();\n    }\n  }, [inputs]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"this worked in signup component\");\n    if (!validate()) {\n      return;\n    }\n    db.collection(\"userLogin\")\n      .add({\n        email: inputs.email,\n        password: inputs.password,\n      })\n      .then(() => {\n        handleServerResponse(true, \"Signup Successful!\");\n        alert(\"You've successfully signed up!\");\n      })\n      .catch((err) => {\n        handleServerResponse(false, \"Signup Failed!\");\n        alert(err.message);\n      });\n    setServerState({ submitting: true });\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div className=\"spacing\">\n        <Form.Label htmlFor=\"email\">Email</Form.Label>\n        <Form.Control\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"Enter Email SIGN UP\"\n          value={inputs.email}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"email\")}\n      </div>\n      <div className=\"spacing\">\n        <Form.Label htmlFor=\"password\">Password</Form.Label>\n        <Form.Control\n          type=\"text\"\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Enter Password SIGN UP\"\n          value={inputs.password}\n          onChange={handleOnChange}\n        ></Form.Control>\n        {renderFieldError(\"password\")}\n      </div>\n      <button className=\"btn btn-primary mb-10\" type=\"submit\">\n        Sign Up\n      </button>\n      {serverState.status && (\n        <p className={!serverState.status.ok ? \"errorMsg\" : \"successMsg\"}></p>\n      )}\n    </Form>\n  );\n}\n\nexport default SignUp;\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":71,"column":6,"nodeType":"87","endLine":71,"endColumn":14,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":135,"column":9,"nodeType":"91","endLine":135,"endColumn":21},{"ruleId":"85","severity":1,"message":"92","line":84,"column":6,"nodeType":"87","endLine":84,"endColumn":14,"suggestions":"93"},{"ruleId":"85","severity":1,"message":"92","line":76,"column":6,"nodeType":"87","endLine":76,"endColumn":14,"suggestions":"94"},{"ruleId":"81","replacedBy":"95"},{"ruleId":"83","replacedBy":"96"},{"ruleId":"85","severity":1,"message":"92","line":72,"column":6,"nodeType":"87","endLine":72,"endColumn":14,"suggestions":"97"},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fieldErrors.length' and 'validate'. Either include them or remove the dependency array.","ArrayExpression",["100"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'fieldErrors' and 'validate'. Either include them or remove the dependency array.",["101"],["102"],["98"],["99"],["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"106","fix":"108"},{"desc":"106","fix":"109"},"Update the dependencies array to be: [fieldErrors.length, inputs, validate]",{"range":"110","text":"111"},"Update the dependencies array to be: [fieldErrors, inputs, validate]",{"range":"112","text":"113"},{"range":"114","text":"113"},{"range":"115","text":"113"},[1862,1870],"[fieldErrors.length, inputs, validate]",[2026,2034],"[fieldErrors, inputs, validate]",[1898,1906],[1863,1871]]